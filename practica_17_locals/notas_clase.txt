#### Locals
Locals nos permite construir expresiones que podamos utilizar en el resto de los recursos para estandarizar por ejemplo
los nombres de los recursos desplegados.

nombre del proyecto, environment, la region, ZA, etc. info util.

se crea un archivo locals.tf con la construccion de nuestra expresiones
locals {
    sufix = "${var.tag.project}-${var.tag.env}-${var.tag.region}" # recurso-proyecto-environment-region
}

tenemos que tener en cuenta que esta expresion esta compuesta por variables, debemos tener declaradas estas.
project, env y region.

luego de eso podemos usar el local en nuestros recursos, 
vamos por ejemplo a la vpc y en el tag Name agregamos:
Name = "Vpc-Virginia-${local.sufix}"
y ya estariamos trayendonos todo el prefijo y sus variables declaradas.

Ya lo que queda es agregarlo en todos los recursos.
para agregarlo en las instancias, como estas tienen el each.value se coloca este entre "${}"
Name = "${each.value}-${local.sufix}"


NOTA IMPORTANTE:
al crear el archivo locals.tf y declarar el recurso locals {} para usarse se debe llamar con local. sin la s.

#### Otro posible uso de los locas en buckets de s3.
el bucket de s3, el nombre tiene que ser unico en el mundo.
nos podemos ayudar con el locals.
crearemos un s3.tf y lo configuraremos

Si creamos un bucket desde terraform y le asignamos su respectivo nombre, al hacer un plan el no nos va a mostrar que hay error, pero puede que al realizar un apply, si el nombre ya existe, el bucket
no se creará.
usaremos un random string para esto.
con el random string buscaremos que a nuestro nombre de bucket se le agreguen aleatoriamente letras y que así sea mucho mas dificil de que el nombre coincida mundialmente.
se debe agregar en el provider el provider de random string
se crea un sufijo nuevo en el archivo locals que sea solamente para el s3