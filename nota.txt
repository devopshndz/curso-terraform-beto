HCL es el lenguaje que utiliza Terrraform para declarar su código.
El mejor aliado en todo el camino de Terraform es terraform registry en donde podremos encontrar todo lo relacionado
con modulos, providers, etc.

terraform init --> inicialización del proyecto en terraform
terraform init -upgrade --> inicialización del proyecto en terraform actualizando inits anteriores
terraform plan --> realizará un plan de que recursos va a crear, + crear - eliminar, ~ modificar
terraform apply --> aplica los cambios previstos en el plan
terraform show --> ver los recursos que terraform creó o que deployó desde el tf.state
terraform destroy --> destruye los recursos creados 
terraform plan --out <nombre del archivo> --> guardar un plan
terraform apply "nombre del archivo" --> deployar un plan guardados
terraform fmt --> darle formato a los códigos de terraform 
terraform validate --> valida la sintaxis de los archivos .tf para que sean correctas.

tree .terraform = muestra el contenido de los providers descargados de terraform en formato arbol
rm -r .terraform = borra todo el contenido del proyecto terraform para poder iniciarlizar un proyecto desde 0

el archivo terraform.tfstate lleva un registro de todo lo que se realiza.
Se pueden separar contenido de terraform.tf en otros archivos.

Guardar el plan: esto se usa para guardar un plan que se va a deployar no necesariamente enseguida y evita que 
modifiquen algo de ese plan:
terraform plan --out <nombre del archivo>
esto hará que el plan se ejecute pero al final del plan dirá: Saved the plan to: <nombre del archivo>
para que luego cuando vayamos a hacer apply: terraform apply "nombre del archivo"

terraform fmt da formato a los archvios de terraform, así se hace para todos los archivos, si se quiere para uno solo
basta con pasarle el nombre a ese archivo. (pregunta de examen)
con terraform validate, validamos la sintaxis de los archivos .tf tambien se puede hacer en archivos especificos.

constraints:
    < menor
    > mayor
    <= menor o igual
    >= mayor o igual
    ~> mayor qué solo dentro de un rago
    != diferente de

Las constraints se utilizan para tener mas control acerca de veriones que se utilizan en terraform
Se usan normalmente en el archivo provider.tf para especificar que versiones de providers o de terraform usar.
Los alias (alias = "value") su usan para cuando vamos a hacer despliegue en multiples regiones de aws
Se define un segundo o varios providers de aws y se le agrega un alias que lo o los identifique. Luego en los recursos a crear
se llaman mediante provider = aws.<alias> así es como terraform identifica el provider y hace que el recurso se desplieuge en ese provider

manejo de variables:

variable "ohio_cidr" {
    default = "10.20.0.0/16"
}
y se llama mediante var.ohio_cidr

mediante exportación:
variable "virginia_cidr" {

}

export TF_VAR_virginia_cidr="10.10.0.0/16" 

mediante el plan:
terraform plan -var ohio_cidr="10.20.0.0/16"

mejor forma: por medio de un archivo variables.tf y terraform.tfvars
variables.tf -> definimos las variables
terraform-tfvars -> llenamos las variables
    este archivo se puede llamar también terraform.tfvars.json

tipos de variables:
description = "que es lo que hace o funcion que esperamos que cumpla"
type = cualquiera de los que estan abajo
string = "10.10.0.0/16" "este es un ejemplo" todo lo que agreguemos dentro de las comillas
number = 1
bool = true o flase
any = cualquier tipo (es el tipo por defecto) (mala practica)

sensitive = true/false (con true declaramos que cuando se haga un plan no se muestre el valor de la variable)

conversion de tipos de variables:
variable "cantidad" {
    default = 5
    type = number
}

variable "cantidad" {
    default = "5"
    type = number
}

aunque en la segunda variable cantidad coloquemos entre "5" al declarar type number terraform toma la variable como un numero.
esto mismo pasa cuando usamos un booleano y un string. si colocamos default "false" y en type = bool, terraform se guía por el tipo booleano.

tipo: listas
variable "lista_cirds" {
    default = ["10.10.0.0/16", "10.13.0.0/16"]
    type = list(string)
}
admiten elementos repetidos. todos los elementos de una lista deben ser del mismo tipo (ej. números o strings)

variable "aws_vpc" "vpc_virginia" {
    cdir_block = var.lista_cidrs[0]
    tags {
        Name "VPC_Virginia"
        env = "DEV
    }
}

variable "aws_vpc" "vpc_ohio" {
    cdir_block = var.lista_cidrs[1]
    tags {
        Name "VPC_Virginia"
        env = "DEV
    }
    provider =aws.ohio
}

tomando el ejemplo anterior, se declara una variable lista_cirds con 2 valores (dentro de una lista) para las variables vpc_virginia y vpc_ohio se utiliza la variable lista_cirds llamandola y pasando la 
posicion del valor [0] y [1] respectivamente

tipo = map (clave valor, un diccionario)

variable "map_cirds" {
    default = {
        "virginia" = "10.10.0.0/16"
        "ohio" = "10.20.0.0/16"
    }
    type = map(string)
}

se llaman de la siguiente manera: en vez de llamarlas con [0] [1] se llaman cin el primer argumento del diccionario ["virginia] ["ohio]

variable "aws_vpc" "vpc_virginia" {
    cdir_block = var.lmap_cidrs["virginia"]
    tags {
        Name "VPC_Virginia"
        env = "DEV
    }
}

variable "aws_vpc" "vpc_ohio" {
    cdir_block = var.map_cidrs["ohio"]
    tags {
        Name "VPC_Virginia"
        env = "DEV
    }
    provider =aws.ohio
}

tipo: set (set no admite elementos repetidos, no podemos acceder a elementos puntuales)
variable "set_cirds" {
    default = ["10.10.0.0/16", "10.13.0.0/16"]
    type = set(string)
}

variable "aws_vpc" "vpc_virginia" {
    for_each = var.set_cidrs   Al ser un conjunto no admite elementos repetidos, se recorre con un for_each
    cdir_block = each.value    llamamos cada elemento del set con each.value
    tags {
        Name "VPC_TEST"
        env = "DEV
    }
}

tipo = object

variable "virginia" {
    type = object({
        nombre = string
        cantidad = number
        cidrs = list(string)
        disponible = bool
        env = string
        owner = string
    })

Es un diccionario que contiene muchos tipos de valores declarados en las variables. la primera parte se establecen los tipos de las variables y la segunda, se colocan los valores

    default = {
        cantidad = 1
        cidrs = ["10.10.0.0/16"]
        disponible = true
        env = "DEV"
        nombre = "virginia"
        owner = "beto"
    }
}

para poder llamar las variables de este tipo de llaman con var.<diccionario>.variable

resource "aws_vpc" "vpc_virginia" {
    cidr_block = var.virginia.cidrs[0]
    tags = {
        Name = var.virginia.nombre
        name = var.virginia.nombre
        env = var.virginia.env
    }
}

tipo = tupla
similar a una lista pero puede contener diferentes tipos de elementos.
variable "ohio" {
    type = tuple([string, string, number, bool])
    default = ["Ohio", "10.20.0.0/16", 1, false]
}

y se llaman:
resource "aws_vpc" "vpc_ohio" {
    cidr_block = var.ohio[1]    (llamada de la variable ohio)
    tags = {
        Name = var.ohio[0]
        name = var.ohio[0]
        env = var.ohio[4]
    }
    provider = aws.ohio
}

-----------------------------
Output
Exponer por pantalla elementos que al hacer un plan son desconocidos y solo terraform puede conocerlos cuando hacer el apply, por ejemplo dir ip publica.
Cuando el deployment termine

output "linux_public_ip" {
    value = aws_instance.linux.public_ip   (este public_ip es el output que va a mostrar)
    description = "Muestro la ip publica asignada a la instancia"
}


estos output se pueden conocer mejor viendolos en terraform registry, llendose a cada servicio de aws tiene su documentacion y en la seccion output están todos los elementos que podemos exponer.

Target resources:
Los target resources nos sirven para cuando queremos hacer un apply en solo un recurso y no en todos los recursos que nos muestra el plan.
Primero se hace un plan, luego:
terraform apply --target <recurso> --> terraform apply --target aws_subnet.public_subnet

### uso de key pair para las inistancias ###
en terraform registry podemos utilizar aws_key_pair para crear llaves para ingresar a la máquina
o creamos directamente en amazon en ec2 instance > key pair
al crear la llave, esta nos da en la consola la llave publica, mientras que nos descarga la llave privada. no se puede perder esta llave privada porque no funcionará la llave.
al crear la llave, colocamos el nombre de la llave y seleccionamos el tipo de esta, RSA y .pem es los mas utilizados.
Es bueno saber esto ya que vamos a utilizar bloques de Data en terraform.

### Bloques de data ###
Los bloques de data en terraform nos permiten utilizar recursos que ya están creados en nuestra cuenta de aws, en este caso podremos utilizar la llave .pem creada.
Data no crea recursos, data lee los recursos que ya existen en terraform y los usa con nuestro codigo de terraform. Un uso habitual es cuando se quieren agregar politicas o roles ya creados
en AWS.
